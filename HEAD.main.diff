diff --git a/HISTORY.org b/HISTORY.org
index 3e9642a..f6a7421 100644
--- a/HISTORY.org
+++ b/HISTORY.org
@@ -1,6 +1,14 @@
 
 * Release history
 
+** v0.5.0
+
+- Much improved aider-comint-mode rendering
+  - Use color from markdown-mode.el. It support more than code block highlight
+- Added 
+- Chinese version of README file
+- Added to melpa. Updated install instruction
+
 ** v0.4.0
 
 - User side change
diff --git a/README.org b/README.org
index e1a4c4e..09bc4cf 100644
--- a/README.org
+++ b/README.org
@@ -1,5 +1,7 @@
 #+TITLE: aider.el : aider (AI Pair Programming) Inside Emacs
 
+[[file:README.zh-cn.org][中文版]]
+
 * Table of Contents
 - [[#introduction][Introduction]]
   - [[#pros-ui-context-awareness-ai-pair-programming][Pros: UI, Context Awareness AI Pair Programming]]
@@ -24,6 +26,8 @@
   - Most of the Elisp code in this repository was generated by Aider or aider.el.
   - aider.el aim to be a stable productivity tool we can use daily. I will carefully test the Features / Functions in this library before code merging.
 
+- [[./HISTORY.org][Recent change history]]
+
 ** Pros: UI, Context Awareness AI Pair Programming
 
 - Pop-up Menu (~aider-transient-menu~)
@@ -40,11 +44,11 @@
 
 ** Cons: aider session in comint is not fancy
 
-- The current implementation is using comint to host aider session, a classic CLI interactive solution used in emacs, However, comint-mode _doesn't have the advance features such as codeblock color rendering and file tracking_ from aider.
-  - Some work-around for code color was applied, but we still don't have a fundamental solution for this right now. Vterm is good but I don't want to depend on it at this moment.
-  - Would be great if someone can solve this problem, or make it better without introduce too many complexity.
+- The current implementation is using comint to host aider session, a classic CLI interactive solution used in emacs, However, comint-mode initially _doesn't have the advance features such as codeblock color rendering and file tracking_ from aider.
+  - *color rendering markdown-mode.el is applied and largely improved this*.
+  - Without file tracking, aider.el cannot do [[https://aider.chat/docs/usage/watch.html#ai-comments][AI comments]]. *The work around we provided is ~aider-implement-todo~*, It use architect command to ask aider to implement comment under cursor by default. I constantly use this feature and feel it is OK.
 
-- *There is no advantage interacting with aider through this comint terminal directly.* Instead, since the comint terminal is well integrated with other parts of emacs, it is encouraged to generate and send prompt to it, either from:
+- *It's generally not advantageous to interact with Aider extensively through the comint terminal directly.* Instead, since the comint terminal is well integrated with other parts of emacs, it is encouraged to generate and send prompt to it, either from:
   - Code buffer directly by _aider code change related commands_ or _ask question related commands_. It make less context switching, and it help building up prompt, reducing manual typing.
   - Aider prompt file (~aider-open-prompt-file~, ~C-c a p~). This is the traditional way in emacs to communicate with comint buffer (just like ESS, python-mode, scala-mode, etc). It is easy to revisit your used commands, organize and manage large code change requiring more prompts and break them into sub-tasks (cause it is org), and it is easy for multi-line prompts. Recently, syntax highlight, completion and snippets were added to this file, and it is now a good place to write and organize your prompts.
 
@@ -54,7 +58,7 @@
 
 ** Vanilla Emacs Installation
 - [[https://aider.chat/docs/install.html][Install aider]]
-- Install the emacs dependency library [[https://github.com/magit/transient][Transient]], and [[https://github.com/magit/magit][Magit]] using your package manager.
+- Install the emacs dependency library [[https://github.com/magit/transient][Transient]], [[https://github.com/magit/magit][Magit]], and [[https://jblevins.org/projects/markdown-mode/][Markdown-mode]] using your package manager.
 - Install aider.el with the following code:
 
 *** With [[https://github.com/radian-software/straight.el?tab=readme-ov-file][Straight]]
@@ -79,7 +83,7 @@ If you have Straight installed
 - *aider-args just passed directly to aider CLI*, [[https://aider.chat/docs/config/options.html][aider options reference]]
 - if aider-args is empty (default), it will use ~/.aider.conf.yml file. In this way, aider CLI and aider.el share same configuration
 
-*** With [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Fetching-Package-Sources.html#:~:text=One%20way%20to%20do%20this,just%20like%20any%20other%20package.][package-vc-install]] (emacs built-in)
+*** With [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Fetching-Package-Sources.html#:~:text=One%20way%20to%20do%20this,just%20like%20any%20other%20package.][package-vc-install]] (Emacs 30+ built-in)
 - Install aider.el by running the following code within Emacs
   - You'll need to manually install the required packages, such as [[https://github.com/magit/transient][Transient]], [[https://github.com/magit/magit][Magit]], and helm.
 #+BEGIN_SRC emacs-lisp
@@ -88,6 +92,22 @@ If you have Straight installed
 
 The config part is as same as above straight one
 
+*** With Melpa + package-install
+
+Enable installation of packages from MELPA by adding an entry to package-archives after (require 'package) and before the call to package-initialize in your init.el or .emacs file: 
+
+#+BEGIN_SRC emacs-lisp
+(require 'package)
+(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
+;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`
+;; and `package-pinned-packages`. Most users will not need or want to do this.
+;;(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
+(package-initialize)
+#+END_SRC
+
+- Use M-x package-refresh-contents or M-x package-list-packages to ensure that Emacs has fetched the MELPA package list 
+- Use M-x package-install to install aider package
+
 ** Doom Installation and Configuration
 
 - Add the following code to your doom/packages.el
@@ -120,7 +140,9 @@ The aider prefix is ~A~.
 
 Helm enables fuzzy searching functionality for command history prompts. Since it is very possible that we use prompt written before, it could potentially save lots of time typing. *This plugin is highly recommended if you are OK with helm*.
 
-You can have helm-based completion with run the following code, after install helm library:
+If you used installed aider.el through melpa and package-install, just neecd to ~(require 'aider-helm)~
+
+Otherwise, You can have helm-based completion with run the following code, after install helm library:
 
 #+BEGIN_SRC emacs-lisp
   (use-package aider
@@ -154,10 +176,10 @@ You can have helm-based completion with run the following code, after install he
   - aider-write-unit-test :: Generate comprehensive unit tests for the current function or file. If the cursor is on a test function, implement the test function.
   - aider-fix-failing-test-under-cursor :: Place cursor on a failing test function and ask Aider to analyze and fix the code to make tests pass. You can provide more information of failed test case to help aider figuring out how to fix the source code.
 
-*** Explain code
+*** Questions on code
   - aider-ask-question :: Ask Aider a question about the code in the current context. If a region is selected, use the region as context.
-    - aider-go-ahead :: When you are asking aider to suggest a change using above command, maybe even after several round of discussion, when you are satisfied with the solution, you can use this command to ask Aider to go ahead and implement the change.
-  - aider-function-or-region-explain :: If a region is selected, ask Aider to explain the selected region. Otherwise, ask Aider to explain the function under the cursor.
+    - You can ask any question on the code. Eg. Explain the function, review the code and find the bug, etc
+  - aider-go-ahead :: When you are asking aider to suggest a change using above command, maybe even after several round of discussion, when you are satisfied with the solution, you can use this command to ask Aider to go ahead and implement the change.
 
 *** Aider prompt file
 
@@ -238,17 +260,25 @@ You can have helm-based completion with run the following code, after install he
 
 - How to review / accept the code change? 
   - Comparing to cursor, aider have a different way to do that. [[https://github.com/tninja/aider.el/issues/98][Discussion]]
-  - Aider v0.77.0 added --auto-accept-architect flag (default: true) to automatically accept changes from architect coder format without confirmation, and *it by default turned on*. If we want to review the code change before accept it like before for many commands in aider.el, we can disable that flag with "--no-auto-accept-architect"
+  - Note: *Aider v0.77.0 automatically accept changes for /architect command. If you want to review the code change before accepting it like before for many commands in aider.el, you can disable that flag with "--no-auto-accept-architect" in either aider-args or .aider.conf.yml*.
 
 - How to disable to aider auto-commit?    
   - add --no-auto-commits to aider-args. aider-args is passed to aider CLI directly. [[https://aider.chat/docs/config/options.html][aider options reference]]
 
+- What kind of model aider support? Can aider support local model?
+  - Yes. Aider support it through [[https://github.com/BerriAI/litellm][LiteLLM]]. Please refer [[https://aider.chat/docs/llms/other.html][aider document]].
+   
+- How to let aider work with your speaking language?
+  - use [[https://aider.chat/docs/usage/conventions.html#specifying-coding-conventions][aider coding conventions]]. In my case, I added "- reply in Chinese" to the CONVENTIONS.md file, and load work through [[https://aider.chat/docs/config/aider_conf.html][.aider.conf.yml]]. Or, put sth like following into aider-args variable. 
+    - "--read" (expand-file-name "~/.emacs.d/.emacs/aider/CONVENTIONS.md")
+
 - How to enter multi-line prompts in aider session buffer?
   - aider itself support that, [[https://aider.chat/docs/usage/commands.html#entering-multi-line-chat-messages][doc]].
   - use aider prompt file (~aider-open-prompt-file~, ~C-c a p~) to write multi-line prompts (we don't want them to go away right? especially if it is not perfect and need to be modified, and we might want to reuse it sometime later).
 
 - Can aider.el work with tramp? (aider running on remote machine)
-  - (I didn't try) mgcyung said it can work in this way: https://github.com/tninja/aider.el/issues/85
+  - artyom-smushkov make aider-add-current-file support tramp file: https://github.com/tninja/aider.el/issues/36
+  - mgcyung said it can work in this way: https://github.com/tninja/aider.el/issues/85
 
 * TODO Future work
 
@@ -263,8 +293,7 @@ You can have helm-based completion with run the following code, after install he
   - [X] yasnippet support
 - Better support for comint buffer
   - Better comint syntax color solution
-    - [X] syntax color rendering can be triggered through aider-switch-to-buffer, given codeing buffer major mode
-    - [X] syntax color rendering can be triggered through /add, /read-only through aider-prompt-file
+    - [X] use syntax highlight in markdown-mode to render text and code in aider-comint-mode
   - Get enhancement from code in major mode of aider-prompt-file
     - [X] aider command syntax highlight
     - [X] aider command completion
@@ -283,3 +312,6 @@ You can have helm-based completion with run the following code, after install he
   - [[https://github.com/copilot-emacs/copilot.el][copilot.el]]: Emacs plugin for GitHub Copilot
   - [[https://github.com/chep/copilot-chat.el][copilot-chat.el]]: Chat with GitHub Copilot in Emacs
   - [[https://github.com/karthink/gptel][gptel]]: Most stared / widely used LLM client in Emacs
+
+- Package depends on this
+  - [[https://github.com/localredhead/ob-aider.el][ob-aider.el]]: Org Babel functions for Aider.el integration
diff --git a/README.zh-cn.org b/README.zh-cn.org
new file mode 100644
index 0000000..d514746
--- /dev/null
+++ b/README.zh-cn.org
@@ -0,0 +1,294 @@
+#+TITLE: aider.el : 在 Emacs 中使用 aider (AI 结对编程)
+
+[[file:README.org][English Version]]
+
+* 目录
+- [[#介绍][介绍]]
+  - [[#优点-用户界面上下文感知ai结对编程][优点：用户界面、上下文感知、AI结对编程]]
+  - [[#缺点-comint中的aider会话不够fancy][缺点：comint中的aider会话不够fancy]]
+- [[#安装][安装]]
+  - [[#原生-emacs-安装][原生 Emacs 安装]]
+  - [[#doom-安装和配置][Doom 安装和配置]]
+  - [[#可选功能][可选功能]]
+- [[#最常用功能已集成到aider菜单中][最常用功能（已集成到aider菜单中）]]
+- [[#注意ai生成的代码][注意AI生成的代码]]
+- [[#常见问题][常见问题]]
+- [[#未来工作][未来工作]]
+- [[#其他-emacs-ai-编码工具][其他 Emacs AI 编码工具]]
+
+* 介绍
+
+- 你喜欢 [[https://www.cursor.com/][Cursor AI 代码编辑器]] 的 AI 功能，但更喜欢在 Emacs 中工作吗？
+
+- [[https://github.com/paul-gauthier/aider][Aider]] 是一个知名且高效的终端 AI 结对编程工具。
+
+- aider.el 包为 Emacs 中的 Aider 提供了简单的用户界面。它旨在最小化用户在 Emacs 中使用 aider 的工作量。
+  - 本仓库中的大部分 Elisp 代码都是由 Aider 或 aider.el 生成的。
+  - aider.el 旨在成为我们可以日常使用的稳定生产力工具。我会在代码合并前仔细测试此库中的功能。
+
+** 优点：用户界面、上下文感知、AI结对编程
+
+- 弹出菜单 (~aider-transient-menu~)
+
+[[file:./transient_menu.png]]
+
+- Git 仓库特定的 Aider 会话管理
+  
+- 将上下文（缓冲区/光标下的内容/区域）与 aider 集成，半自动构建提示。使用 helm 轻松搜索/重用以前的提示
+  
+- 为 AI 辅助编程工作流提供菜单项。TDD 风格循环以减少 AI 可能引入的错误
+  
+- Aider 提示文件，用于组织相对大型的代码更改任务，并使其可重现。按照 ESS 方式从中与 aider 会话交互。支持 Yasnippet 以重用社区中的优秀提示。
+
+** 缺点：comint中的aider会话不够fancy
+
+- 当前实现使用 comint 托管 aider 会话，这是 Emacs 中使用的经典 CLI 交互解决方案。然而，comint-mode 最初_没有 aider 中的代码块颜色渲染和文件跟踪等高级功能_。
+  - *应用了 markdown-mode.el 的颜色渲染，大大改善了这一点*。
+  - 没有文件跟踪，aider.el 无法执行 [[https://aider.chat/docs/usage/watch.html#ai-comments][AI 注释]]。*我们提供的解决方法是 ~aider-implement-todo~*，默认情况下，它使用架构师命令要求 aider 实现光标下的注释。我经常使用这个功能，感觉还不错。
+
+- *通常直接通过 comint 终端与 Aider 进行大量交互并不是很有优势。* 相反，由于 comint 终端与 Emacs 的其他部分集成得很好，建议从以下方式生成并发送提示：
+  - 直接从代码缓冲区通过 _aider 代码更改相关命令_ 或 _提问相关命令_。这减少了上下文切换，并帮助构建提示，减少手动输入。
+  - Aider 提示文件 (~aider-open-prompt-file~, ~C-c a p~)。这是 Emacs 中与 comint 缓冲区通信的传统方式（就像 ESS、python-mode、scala-mode 等）。它便于重新访问您使用过的命令，组织和管理需要更多提示的大型代码更改，并将它们分解为子任务（因为它是 org 格式），并且它便于多行提示。最近，为该文件添加了语法高亮、补全和代码片段，现在它是编写和组织提示的好地方。
+
+* 安装
+
+- Emacs 需要 >= 26.1
+
+** 原生 Emacs 安装
+- [[https://aider.chat/docs/install.html][安装 aider]]
+- 使用您的包管理器安装 Emacs 依赖库 [[https://github.com/magit/transient][Transient]]、[[https://github.com/magit/magit][Magit]] 和 [[https://jblevins.org/projects/markdown-mode/][Markdown-mode]]。
+- 使用以下代码安装 aider.el：
+
+*** 使用 [[https://github.com/radian-software/straight.el?tab=readme-ov-file][Straight]]
+如果您已安装 Straight
+#+BEGIN_SRC emacs-lisp
+  (use-package aider
+    :straight (:host github :repo "tninja/aider.el" :files ("aider.el" "aider-core.el" "aider-file.el" "aider-code-change.el" "aider-discussion.el" "aider-prompt-mode.el"))
+    :config
+    ;; 对于最新的 claude sonnet 模型
+    (setq aider-args '("--model" "sonnet"))
+    (setenv "ANTHROPIC_API_KEY" anthropic-api-key)
+    ;; 或 chatgpt 模型
+    ;; (setq aider-args '("--model" "o3-mini"))
+    ;; (setenv "OPENAI_API_KEY" <your-openai-api-key>)
+    ;; 或使用您的个人配置文件
+    ;; (setq aider-args `("--config" ,(expand-file-name "~/.aider.conf.yml")))
+    ;; ;;
+    ;; 可选：为临时菜单设置键绑定
+    (global-set-key (kbd "C-c a") 'aider-transient-menu))
+#+END_SRC
+
+- *aider-args 直接传递给 aider CLI*，[[https://aider.chat/docs/config/options.html][aider 选项参考]]
+- 如果 aider-args 为空（默认），它将使用 ~/.aider.conf.yml 文件。这样，aider CLI 和 aider.el 共享相同的配置
+
+*** 使用 [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Fetching-Package-Sources.html#:~:text=One%20way%20to%20do%20this,just%20like%20any%20other%20package.][package-vc-install]]（Emacs 内置）
+- 通过在 Emacs 中运行以下代码安装 aider.el
+  - 您需要手动安装所需的包，如 [[https://github.com/magit/transient][Transient]]、[[https://github.com/magit/magit][Magit]] 和 helm。
+#+BEGIN_SRC emacs-lisp
+(package-vc-install '(aider :url "https://github.com/tninja/aider.el"))
+#+END_SRC
+
+配置部分与上面的 straight 相同
+
+** Doom 安装和配置
+
+- 将以下代码添加到您的 doom/packages.el
+
+#+BEGIN_SRC emacs-lisp
+(package! aider :recipe (:host github :repo "tninja/aider.el" :files ("aider.el" "aider-core.el" "aider-file.el" "aider-code-change.el" "aider-discussion.el" "aider-prompt-mode.el" "aider-doom.el")))
+#+END_SRC
+
+- 调整并将以下代码添加到您的 doom/config.el
+
+#+BEGIN_SRC emacs-lisp
+(use-package aider
+  :config
+  (setq aider-args '("--model" "sonnet")))
+#+END_SRC
+
+aider 前缀是 ~A~。
+
+- 启动并打开 aider 缓冲区：=[SPC] A o=
+- 使用 =[SPC] A a c= 添加当前文件
+- 使用 =[SPC] A r= 重置 aider 会话
+[[file:./doom_menus.png]]
+
+- *然而，更推荐使用临时菜单而不是 doom 菜单*，因为我经常使用临时菜单，所以它得到了更好的维护。
+  - 任何想为 doom 菜单做贡献的人，欢迎帮助改进。谢谢。
+ 
+** 可选功能
+
+*** Helm 支持
+
+Helm 为命令历史提示启用模糊搜索功能。由于我们很可能会使用之前写过的提示，这可能会节省大量输入时间。*如果您可以接受 helm，强烈推荐这个插件*。
+
+安装 helm 库后，您可以通过运行以下代码获得基于 helm 的补全：
+
+#+BEGIN_SRC emacs-lisp
+  (use-package aider
+    :straight (:host github :repo "tninja/aider.el" :files ("aider.el" "aider-core.el" "aider-file.el" "aider-code-change.el" "aider-discussion.el" "aider-prompt-mode.el" "aider-doom.el" "aider-helm.el")))
+#+END_SRC
+
+* 最常用功能（已集成到aider菜单中）
+
+*** Aider 会话管理
+  - aider-run-aider :: 创建基于 comint 的、*特定于 git 仓库的 Aider 会话*，用于交互式对话。
+    - Git 仓库识别基于当前文件的路径
+    - 可以同时为不同的 Git 仓库运行多个 Aider 会话
+    - 当使用通用参数（~C-u~）调用时，将提示用户更改此会话的 ~aider-args~ 内容。
+  - aider-switch-to-buffer :: 切换到 Aider 缓冲区。
+    - 在菜单中使用 ~^~ 可以在当前框架内的其他窗口中切换打开 aider 会话，或为 aider 会话打开专用框架。当有多个显示器时，这很有用，一个框架/显示器用于保存代码的多个缓冲区，另一个框架/显示器保存 aider 会话。
+
+*** 更多向 Aider 缓冲区添加文件的方法
+  - aider-add-current-file-or-dired-marked-files :: 添加当前缓冲区文件。如果在 dired 缓冲区中使用，添加所有 dired 标记的文件。
+    - ~C-u~ 前缀以只读方式添加文件。
+  - aider-add-files-in-current-window :: 添加当前窗口中的所有缓冲区。
+
+*** 编写代码
+  - aider-function-or-region-refactor :: 如果选择了区域，要求 Aider 重构所选区域。否则，要求 Aider 更改/重构光标下的函数。
+  - aider-implement-todo :: 在当前上下文中实现注释中的需求。
+    - 如果光标在注释行上，就地实现该特定注释。
+    - 如果有多行注释的选择区域，就地为这些注释实现代码。
+    - 如果光标在函数内，为该函数实现 TODO。
+    - 否则为整个当前文件实现 TODO。
+
+*** 单元测试/测试驱动开发支持
+  - aider-write-unit-test :: 为当前函数或文件生成全面的单元测试。如果光标在测试函数上，实现该测试函数。
+  - aider-fix-failing-test-under-cursor :: 将光标放在失败的测试函数上，要求 Aider 分析并修复代码以使测试通过。您可以提供更多关于失败测试用例的信息，以帮助 aider 找出如何修复源代码。
+
+*** 解释代码
+  - aider-ask-question :: 向 Aider 询问当前上下文中的代码问题。如果选择了区域，使用该区域作为上下文。
+    - aider-go-ahead :: 当您使用上述命令要求 aider 建议更改时，甚至在几轮讨论之后，当您对解决方案满意时，可以使用此命令要求 Aider 继续实施更改。
+  - aider-function-or-region-explain :: 如果选择了区域，要求 Aider 解释所选区域。否则，要求 Aider 解释光标下的函数。
+
+*** Aider 提示文件
+
+- 支持语法高亮、aider 命令补全、文件路径补全
+
+- 使用 ~C-c a p~ 打开特定于仓库的提示文件。您可以使用此文件组织任务，编写提示并将其发送到 Aider 会话。支持多行提示。
+
+- 喜欢从编辑器缓冲区向 comint 缓冲区发送代码的人（例如 ESS、python-mode、scala-mode）可能会喜欢这个。这是一种交互式且可重现的方式。
+
+- ~C-c C-n~ 键可用于将当前提示行发送到 comint 缓冲区。或者逐行批量发送选定区域。根据我的经验，这是 aider 提示文件中最常用的方法。
+
+- ~C-c C-c~ 键用于多行提示。以下示例显示了当光标在提示上时按下 ~C-c C-c~ 键的情况。
+
+[[file:./aider_prompt_file.png]]
+
+**** [[./snippets/aider-prompt-mode][提示片段]]
+
+- aider 的提示可能共享类似的结构。可以使用 Yasnippet 来帮助重用这些提示。
+
+- Aider 提示文件现在支持 yasnippet。当前片段来自 [[https://www.reddit.com/r/ClaudeAI/comments/1f0ya1t/i_used_claude_to_write_an_sop_for_using_claude/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1&utm_content=share_button][这个 reddit 帖子]]、[[https://www.reddit.com/r/ChatGPTCoding/comments/1f51y8s/a_collection_of_prompts_for_generating_high/][另一个 reddit 帖子]] 和一个 [[https://github.com/PickleBoxer/dev-chatgpt-prompts][git 仓库]]。
+
+- 您可以使用
+  - ~M-x yas-describe-tables~ 查看可用的片段
+  - ~M-x yas-insert-snippet~ 插入片段。
+  - ~M-x yas-expand~ 展开光标下的片段。
+
+- 欢迎在 [[./snippets/aider-prompt-mode][片段文件夹]] 中添加更多片段/改进现有片段！
+
+*** 在 comint 缓冲区内
+
+- / 键触发 aider 命令补全
+- 在某些命令后会自动触发文件路径补全
+- 使用 TAB 键从迷你缓冲区输入提示，或使用带补全的 helm
+
+* 注意AI生成的代码
+
+- 感谢 LLM。使用 AI 生成大量代码非常容易。但生成代码并不能完成工作。
+  - 可能隐藏着潜在的错误。需要验证功能是否按预期工作，代码更改是否破坏了现有功能。
+  - 开发人员可能缺乏对 AI 生成代码的理解。如果有太多开发人员不太理解的代码，项目可能会失控。
+
+- *单元测试对上述两个问题都很有用*。而 aider 可以帮助编写单元测试。
+  - AI 生成的测试需要手动检查/修复。但通常测试代码更容易理解。
+  - 运行单元测试可以帮助验证代码的正确性/识别错误。它还可以帮助开发人员更好地理解 AI 生成的代码如何工作，并且可以让开发人员对新代码更有信心。
+
+** [[https://en.wikipedia.org/wiki/Test-driven_development][TDD]] 风格的 AI 编程工作流
+
+1. **实现或修改代码**：
+   - 对于现有代码：将光标放在函数中或在选定区域上使用 ~aider-function-or-region-refactor~
+   - 对于新代码：在 TODO 注释上使用 ~aider-implement-todo~
+   
+   *添加新代码的示例*：
+   
+   光标在此注释上：
+   #+BEGIN_SRC python :eval never
+   # TODO: Implement a function that checks if a number is prime
+   #+END_SRC
+   
+   运行 ~aider-implement-todo~ 可能会生成：
+   #+BEGIN_SRC python :eval never
+   def is_prime(n):
+       if n <= 1:
+           return False
+       for i in range(2, int(n ** 0.5) + 1):
+           if n % i == 0:
+               return False
+       return True
+   #+END_SRC
+   
+   如果建议不令人满意，使用 ~Ask Question~ 进行改进，并使用 ~Go Ahead~ 确认更改。
+
+2. **生成测试**：使用 ~aider-write-unit-test~ 和 ~aider-fix-failing-test-under-cursor~ 验证您的实现。
+
+3. **完善代码和测试**：根据需要使用其他提示或手动调整进一步重构。
+
+4. 返回步骤 1
+
+* 常见问题
+
+- 如何审查/接受代码更改？
+  - 与 cursor 相比，aider 有不同的方式来做到这一点。[[https://github.com/tninja/aider.el/issues/98][讨论]]
+  - 注意：*Aider v0.77.0 会自动接受 /architect 命令的更改。如果您想像以前在 aider.el 中的许多命令一样在接受更改之前审查代码更改，您可以在 aider-args 或 .aider.conf.yml 中使用 "--no-auto-accept-architect" 禁用该标志。*
+
+- 如何禁用 aider 自动提交？
+  - 在 aider-args 中添加 --no-auto-commits。aider-args 直接传递给 aider CLI。[[https://aider.chat/docs/config/options.html][aider 选项参考]]
+
+- aider 支持什么类型的模型？aider 能支持本地模型吗？
+  - 是的。Aider 通过 [[https://github.com/BerriAI/litellm][LiteLLM]] 支持它。请参考 [[https://aider.chat/docs/llms/other.html][aider 文档]]。
+   
+- 如何让 aider 用中文回复？
+  - 使用 [[https://aider.chat/docs/usage/conventions.html#specifying-coding-conventions][aider 编码约定]]。在我的情况下，我在 CONVENTIONS.md 文件中添加了 "- reply in Chinese"，并通过 [[https://aider.chat/docs/config/aider_conf.html][.aider.conf.yml]] 加载工作。或者，将类似以下内容放入 aider-args 变量中。
+    - "--read" (expand-file-name "~/.emacs.d/.emacs/aider/CONVENTIONS.md")
+
+- 如何在 aider 会话缓冲区中输入多行提示？
+  - aider 本身支持这一点，[[https://aider.chat/docs/usage/commands.html#entering-multi-line-chat-messages][文档]]。
+  - 使用 aider 提示文件（~aider-open-prompt-file~，~C-c a p~）编写多行提示（我们不希望它们消失，对吧？特别是如果它不完美需要修改，而且我们可能想在以后的某个时候重用它）。
+
+- aider.el 能与 tramp 一起工作吗？（aider 在远程机器上运行）
+  - artyom-smushkov 使 aider-add-current-file 支持 tramp 文件：https://github.com/tninja/aider.el/issues/36
+  - mgcyung 说它可以这样工作：https://github.com/tninja/aider.el/issues/85
+
+* 未来工作
+
+** 功能
+
+- 更多上下文敏感的代码更改/代码阅读命令
+- 更好地支持 aider 提示文件
+  - [X] aider 命令语法高亮
+  - [X] aider 命令补全
+  - [X] 文件路径补全
+  - [X] 提示正文补全 - 与 helm 历史同步
+  - [X] yasnippet 支持
+- 更好地支持 comint 缓冲区
+  - 更好的 comint 语法颜色解决方案
+    - [X] 使用 markdown-mode 中的语法高亮来渲染 aider-comint-mode 中的文本和代码
+  - 从 aider-prompt-file 的主模式代码中获取增强
+    - [X] aider 命令语法高亮
+    - [X] aider 命令补全
+    - [X] 提示正文补全
+- 更多关于如何简化菜单/命令的思考
+
+** 代码质量
+ 
+- 更好的单元测试/此包的集成测试。希望它是自动化的。
+
+* 其他 Emacs AI 编码工具
+
+- 受启发并感谢：
+  - [[https://github.com/shouya/ancilla.el][ancilla.el]]：AI 编码助手支持代码生成/代码重写/讨论
+  - [[https://github.com/xenodium/chatgpt-shell][chatgpt-shell]]：ChatGPT 和 DALL-E Emacs shells + Org Babel，基于 comint 会话的想法
+  - [[https://github.com/copilot-emacs/copilot.el][copilot.el]]：GitHub Copilot 的 Emacs 插件
+  - [[https://github.com/chep/copilot-chat.el][copilot-chat.el]]：在 Emacs 中与 GitHub Copilot 聊天
+  - [[https://github.com/karthink/gptel][gptel]]：Emacs 中最受欢迎/广泛使用的 LLM 客户端
diff --git a/aider-code-change.el b/aider-code-change.el
index 8534909..37e66fd 100644
--- a/aider-code-change.el
+++ b/aider-code-change.el
@@ -59,7 +59,7 @@ followed by refactoring instructions for the specified function."
   (if (use-region-p)
       (let* ((region-text (buffer-substring-no-properties (region-beginning) (region-end)))
              (function-name (which-function))
-             (user-command (aider-read-string "Enter your refactor instruction: "))
+             (user-command (aider-read-string "Refactor instruction for selected region: "))
              (command (aider-region-refactor-generate-command region-text function-name user-command)))
         (aider-add-current-file)
         (aider--send-command command t))
diff --git a/aider-core.el b/aider-core.el
index a0be5e9..490b48a 100644
--- a/aider-core.el
+++ b/aider-core.el
@@ -12,6 +12,7 @@
 (require 'comint)
 (require 'magit)
 (require 'savehist)
+(require 'markdown-mode)
 
 (defgroup aider nil
   "Customization group for the Aider package."
@@ -33,38 +34,50 @@
 When non-nil, open Aider buffer in a new frame.
 When nil, use standard `display-buffer' behavior.")
 
-(defface aider-command-separator
-  '((((type graphic)) :strike-through t :extend t)
-    (((type tty)) :inherit font-lock-comment-face :underline t :extend t))
-  "Face for command separator in aider."
-  :group 'aider)
-
-(defface aider-command-text
-  '((t :inherit bold))
-  "Face for commands sent to aider buffer."
-  :group 'aider)
-
-(defvar aider-font-lock-keywords '(("^\x2500+\n?" 0 '(face aider-command-separator) t)
-                                   ("^\x2500+" 0 '(face nil display (space :width 2))))
-  "Font lock keywords for aider buffer.")
+(declare-function evil-define-key* "evil" (state map key def))
 
 (defvar aider-comint-mode-map
   (let ((map (make-sparse-keymap)))
     (set-keymap-parent map comint-mode-map)
     (define-key map (kbd "C-c C-f") #'aider-prompt-insert-file-path)
     (define-key map (kbd "TAB") #'aider-core-insert-prompt)
+    (define-key map (kbd "C-c C-y") #'aider-go-ahead)
     map)
   "Keymap for `aider-comint-mode'.")
 
-(declare-function evil-define-key* "evil" (state map key def))
+(defun aider--apply-markdown-highlighting ()
+  "Set up markdown highlighting for aider buffer with optimized performance."
+  ;; 1) Use `markdown-mode`'s syntax table:
+  (set-syntax-table (make-syntax-table markdown-mode-syntax-table))
+  ;; 2) For multiline constructs (like fenced code blocks), enable `markdown-syntax-propertize`:
+  (setq-local syntax-propertize-function #'markdown-syntax-propertize)
+  ;; 3) Reuse `markdown-mode`'s font-lock keywords for highlighting:
+  (setq-local font-lock-defaults
+              (list markdown-mode-font-lock-keywords
+                    nil ;; KEYWORDS-ONLY
+                    nil ;; CASE-FOLD
+                    nil ;; SYNTAX-ALIST
+                    nil)) ;; SYNTAX-BEGIN
+  ;; 4) Enable fenced code block highlighting:
+  (setq-local markdown-fontify-code-blocks-natively t)
+  ;; 5) Jit-lock and other
+  (setq-local font-lock-multiline t)  ;; Handle multiline constructs efficiently
+  (setq-local jit-lock-contextually nil)  ;; Disable contextual analysis
+  (setq-local font-lock-support-mode 'jit-lock-mode)  ;; Ensure JIT lock is used
+  (setq-local jit-lock-defer-time 0)
+  ;; 6) Register font-lock explicitly:
+  (font-lock-mode 1)
+  ;; 7) Force immediate fontification of visible area:
+  (font-lock-flush)
+  (font-lock-ensure))
 
 (define-derived-mode aider-comint-mode comint-mode "Aider Session"
   "Major mode for interacting with Aider.
 Inherits from `comint-mode' with some Aider-specific customizations.
 \\{aider-comint-mode-map}"
   ;; Set up font-lock
-  (setq font-lock-defaults '(nil t))
-  (font-lock-add-keywords nil aider-font-lock-keywords t)
+  ;; (setq font-lock-defaults '(nil t))
+  ;; (font-lock-add-keywords nil aider-font-lock-keywords t)
   ;; Set up input sender for multi-line handling
   (setq-local comint-input-sender 'aider-input-sender)
   ;; Add command completion hooks
@@ -73,6 +86,7 @@ Inherits from `comint-mode' with some Aider-specific customizations.
   ;; Automatically trigger file path insertion for file-related commands
   (add-hook 'post-self-insert-hook #'aider-core--auto-trigger-file-path-insertion nil t)
   ;; Bind space key to aider-core-insert-prompt when evil package is available
+  (aider--apply-markdown-highlighting)
   (when (featurep 'evil)
     (evil-define-key* 'normal aider-comint-mode-map (kbd "SPC") #'aider-core-insert-prompt)))
 
@@ -125,19 +139,15 @@ Otherwise return STR unchanged."
       (format "{aider\n%s\naider}" str)
     str))
 
-(defun aider--comint-send-string-syntax-highlight (buffer text)
-  "Send TEXT to the comint BUFFER with syntax highlighting.
-This function ensures proper syntax highlighting by inheriting face properties
-from the source buffer and maintaining proper process markers."
+(defun aider--comint-send-string (buffer text)
+  "Send TEXT to the comint BUFFER.
+This function ensures proper process markers are maintained."
   (with-current-buffer buffer
     (let ((process (get-buffer-process buffer))
           (inhibit-read-only t))
       (goto-char (process-mark process))
-      ;; Insert text with proper face properties
-      (insert (propertize text
-                         'face 'aider-command-text
-                         'font-lock-face 'aider-command-text
-                         'rear-nonsticky t))
+      ;; Insert text
+      (insert text)
       ;; Update process mark and send text
       (set-marker (process-mark process) (point))
       (comint-send-string process text))))
@@ -157,7 +167,7 @@ Optional LOG, when non-nil, logs the command to the message area."
         (if (and aider-process (comint-check-proc aider-buffer))
             (progn
               ;; Send the command to the aider process
-              (aider--comint-send-string-syntax-highlight aider-buffer (concat command "\n"))
+              (aider--comint-send-string aider-buffer (concat command "\n"))
               ;; Provide feedback to the user
               (when log
                 (message "Sent command to aider buffer: %s" (string-trim command)))
@@ -168,51 +178,19 @@ Optional LOG, when non-nil, logs the command to the message area."
     (message "Buffer %s does not exist. Please start 'aider' first." (aider-buffer-name))))
 
 ;;;###autoload
-(defun aider-switch-to-buffer (&optional source-buffer)
+(defun aider-switch-to-buffer ()
   "Switch to the Aider buffer.
 When `aider--switch-to-buffer-other-frame' is non-nil, open in a new frame.
-If the current buffer is already the Aider buffer, do nothing.
-Optional SOURCE-BUFFER specifies the buffer to inherit syntax highlighting from;
-if nil, use current buffer."
+If the current buffer is already the Aider buffer, do nothing."
   (interactive)
   (if (string= (buffer-name) (aider-buffer-name))
       (message "Already in Aider buffer")
-    (let ((source-buffer (or source-buffer (current-buffer))))
-      (if-let ((buffer (get-buffer (aider-buffer-name))))
-          (progn
-            (if aider--switch-to-buffer-other-frame
-                (switch-to-buffer-other-frame buffer)
-              (pop-to-buffer buffer))
-            (when (with-current-buffer source-buffer
-                    (derived-mode-p 'prog-mode))
-              (aider--inherit-source-highlighting source-buffer)))
-        (message "Aider buffer '%s' does not exist." (aider-buffer-name))))))
-
-(defun aider--inherit-source-highlighting (source-buffer)
-  "Inherit syntax highlighting settings from SOURCE-BUFFER."
-  (with-current-buffer source-buffer
-    (let ((source-keywords font-lock-keywords)
-          (source-keywords-only font-lock-keywords-only)
-          (source-keywords-case-fold-search font-lock-keywords-case-fold-search)
-          ;; (source-syntax-table (syntax-table))
-          (source-defaults font-lock-defaults))
-      (with-current-buffer (aider-buffer-name)
-        (when (not (string-equal (prin1-to-string source-keywords)
-                               (prin1-to-string font-lock-keywords)))
-            ;; (set-syntax-table source-syntax-table)
-            (setq font-lock-defaults
-                  (if source-defaults
-                      source-defaults
-                    `((,source-keywords)
-                      nil
-                      ,source-keywords-case-fold-search)))
-          (setq font-lock-keywords source-keywords
-                font-lock-keywords-only source-keywords-only
-                font-lock-keywords-case-fold-search source-keywords-case-fold-search)
-          (font-lock-mode 1)
-          (font-lock-ensure)
-          (message "Aider buffer syntax highlighting inherited from %s"
-                   (with-current-buffer source-buffer major-mode)))))))
+    (if-let ((buffer (get-buffer (aider-buffer-name))))
+        (progn
+          (if aider--switch-to-buffer-other-frame
+              (switch-to-buffer-other-frame buffer)
+            (pop-to-buffer buffer)))
+      (message "Aider buffer '%s' does not exist." (aider-buffer-name)))))
 
 ;;;###autoload
 (defun aider-run-aider (&optional edit-args)
@@ -229,7 +207,10 @@ With the universal argument EDIT-ARGS, prompt to edit aider-args before running.
     (unless (comint-check-proc buffer-name)
       (apply #'make-comint-in-buffer "aider" buffer-name aider-program nil current-args)
       (with-current-buffer buffer-name
-        (aider-comint-mode)))
+        (aider-comint-mode))
+      (message "%s" (if current-args
+                       (format "Running aider with args: %s" (mapconcat #'identity current-args " "))
+                     "Running aider with no args provided.")))
     (aider-switch-to-buffer)))
 
 (defun aider-input-sender (proc string)
@@ -289,7 +270,7 @@ invoke `aider-prompt-insert-file-path`."
   (interactive)
   (let ((input (aider-read-string "Enter prompt: ")))
     (when input
-      (insert input))))
+      (insert input "\n"))))
 
 (provide 'aider-core)
 
diff --git a/aider-discussion.el b/aider-discussion.el
index b4c6b66..c489f11 100644
--- a/aider-discussion.el
+++ b/aider-discussion.el
@@ -15,31 +15,31 @@
 
 ;; New function to get command from user and send it prefixed with "/ask "
 ;;;###autoload
-(defun aider-ask-question (&optional no-context)
+(defun aider-ask-question ()
   "Ask aider question.
 If NO-CONTEXT is non-nil, send the question to the general aider comint buffer.
 Otherwise, send the question to the corresponding aider comint buffer."
-  (interactive "P")
+  (interactive)
   ;; Dispatch to general question if in aider buffer
-  (if (or no-context
-       (string= (buffer-name) (aider-buffer-name)))
-    (aider-general-question)
-    (let* ((function-name (which-function))
-           (region-active (region-active-p))
-           (prompt (cond
-                    (function-name (format "About function '%s': " function-name))
-                    (region-active "Question for the selected region: ")
-                    (t "Question: ")))
-           (raw-question (aider-read-string prompt))
-           (question (if function-name
-                         (concat prompt raw-question)
-                       raw-question))
-           (region-text (and (region-active-p)
-                             (buffer-substring-no-properties (region-beginning) (region-end))))
-           (question-context (if region-text
-                                 (format "%s: %s" question region-text)
-                               question)))
-      (aider-current-file-command-and-switch "/ask " question-context))))
+  (let* ((function-name (which-function))
+         (region-active (region-active-p))
+         (region-in-function (and region-active function-name))
+         (prompt (cond
+                  (region-in-function (format "Question for the selected region in function '%s': " function-name))
+                  (function-name (format "About function '%s': " function-name))
+                  (region-active "Question for the selected region: ")
+                  (t "Question: ")))
+         (raw-question (aider-read-string prompt))
+         (question (if function-name
+                       (concat prompt raw-question)
+                     raw-question))
+         (region-text (and (region-active-p)
+                           (buffer-substring-no-properties (region-beginning) (region-end))))
+         (question-context (if region-text
+                               (format "%s: %s" question region-text)
+                             question)))
+    (aider-current-file-command-and-switch "/ask " question-context)
+    (message "Ask aider to: explain code, review implementation, suggest improvements, or any other coding assistance")))
 
 ;;;###autoload
 (defun aider-general-question ()
diff --git a/aider-doom.el b/aider-doom.el
index df16daa..e2cee5d 100644
--- a/aider-doom.el
+++ b/aider-doom.el
@@ -23,7 +23,7 @@
                     :desc "Add same type files in dir" "s" #'aider-add-same-type-files-under-dir
                     :desc "Batch add marked files" "m" #'aider-batch-add-dired-marked-files
                     :desc "Drop current file" "d" #'aider-drop-current-file
-                    :desc "Show last commit" "c" #'aider-magit-show-last-commit
+                    :desc "Show last commit" "c" #'aider-magit-show-last-commit-or-log
                     :desc "Undo last change" "u" #'aider-undo-last-change)
 
                    (:prefix ("c" . "Code")
diff --git a/aider-file.el b/aider-file.el
index f7842a2..a7150be 100644
--- a/aider-file.el
+++ b/aider-file.el
@@ -86,7 +86,7 @@ If there are more than 40 files, refuse to add and show warning message."
 
 ;; New function to show the last commit using magit
 ;;;###autoload
-(defun aider-magit-show-last-commit (&optional log)
+(defun aider-magit-show-last-commit-or-log (&optional log)
   "Show the last commit message using Magit.
 With prefix argument (LOG), show commit log instead of single commit.
 If Magit is not installed, report that it is required."
@@ -152,7 +152,61 @@ Otherwise, add the current file as read-only."
 (defun aider-current-file-command-and-switch (prefix command)
   "Send COMMAND to the Aider buffer prefixed with PREFIX."
   (aider-add-current-file)
-  (aider--send-command (concat prefix command) t))
+  (aider--send-command (concat prefix command) t)
+  (when (string-prefix-p "/architect" prefix)
+    (message "Note: Aider v0.77.0 automatically accept changes for /architect command. If you want to review the code change before accepting it like before for many commands in aider.el, you can disable that flag with \"--no-auto-accept-architect\" in aider-args or .aider.conf.yml.")))
+
+;;;###autoload
+(defun aider-pull-or-review-diff-file ()
+  "Review a diff file with Aider or generate one if not viewing a diff.
+If current buffer is a .diff file, ask Aider to review it.
+Otherwise, generate the diff."
+  (interactive)
+  (if (and buffer-file-name (string-match-p "\\.diff$" buffer-file-name))
+      (let* ((file-name (file-name-nondirectory buffer-file-name))
+             (init-prompt (format "Please review this diff file (%s), identify bug, and provide feedback on the changes" file-name))
+             (prompt (aider-read-string "Enter diff review prompt: " init-prompt)))
+        (aider-current-file-command-and-switch "/ask " prompt))
+    (aider--magit-generate-feature-branch-diff-file)))
+
+(defun aider--magit-generate-feature-branch-diff-file ()
+  "Generate a diff file between base and feature branches.
+The diff file will be named <feature_branch>.<base_branch>.diff
+and placed in the git root directory.
+If input doesn't contain '..' it's treated as base branch and diff
+is generated against HEAD."
+  (interactive)
+  (let* ((git-root (magit-toplevel))
+         (raw-range (read-string "Branch range (base..feature or just base): " "main"))
+         (range (string-trim raw-range))
+         (branches (if (string-match-p "\\.\\." range)
+                       (split-string range "\\.\\.")
+                     (list range "HEAD")))
+         (base-branch (car branches))
+         (feature-branch (or (cadr branches) "HEAD"))
+         (diff-file (concat git-root feature-branch "." base-branch ".diff")))
+    ;; Verify we're in a git repo
+    (unless git-root
+      (user-error "Not in a git repository"))
+    ;; ;; Check if repo is clean
+    (when (magit-anything-modified-p)
+      (message "Repository has uncommitted changes. You might want to commit or stash them first")
+      (sleep-for 1))
+    ;; Store current branch to return to it
+    (let ((original-branch (magit-get-current-branch)))
+      ;; Git operations
+      (magit-run-git "checkout" base-branch) ; Switch to base branch first
+      (magit-run-git "pull")      ; Pull latest changes on base branch
+      (magit-run-git "checkout" original-branch) ; Return to original branch
+      (when (not (string= feature-branch "HEAD"))
+        (magit-run-git "checkout" feature-branch)
+        (magit-run-git "checkout" original-branch)) ; Return to original branch
+      ;; Generate diff file
+      (magit-run-git "diff" (concat base-branch ".." feature-branch)
+                     (concat "--output=" diff-file))
+      ;; Open diff file
+      (find-file diff-file)
+      (message "Generated diff file: %s" diff-file))))
 
 (provide 'aider-file)
 
diff --git a/aider-prompt-mode.el b/aider-prompt-mode.el
index a4f1536..1c94a61 100644
--- a/aider-prompt-mode.el
+++ b/aider-prompt-mode.el
@@ -46,28 +46,7 @@ Otherwise, send the line under cursor."
   (if (region-active-p)
       (aider-send-region-by-line)
     (let ((line (thing-at-point 'line t)))
-      (aider--send-line-with-code-syntax line))))
-
-(defun aider--send-line-with-code-syntax (line)
-  "Trim LINE and send it to the Aider buffer.
-If command contains a filename, open that file in a temp buffer,
-inherit syntax highlighting, then close the temporary buffer."
-  (let ((trimmed-line (string-trim line))
-        (filename-buffer nil))
-    (unwind-protect
-        (progn
-          ;; Check if the command contains a filename
-          (let ((filename (aider--extract-filename-from-command trimmed-line)))
-            (when filename
-              ;; If filename found, open it in a temporary buffer
-              (setq filename-buffer (find-file-noselect filename))))
-          ;; Send the command
-          (aider--send-command trimmed-line nil)
-          ;; Switch to aider buffer with syntax highlighting from filename-buffer
-          (aider-switch-to-buffer filename-buffer))
-      ;; Clean up: kill the temporary buffer if it exists
-      (when (and filename-buffer (buffer-live-p filename-buffer))
-        (kill-buffer filename-buffer)))))
+      (aider--send-command (string-trim line) t))))
 
 (defun aider--extract-filename-from-command (command-str)
   "Extract filename from COMMAND-STR if it matches an aider command pattern.
@@ -91,7 +70,7 @@ returns nil."
                           (region-end))))
         (mapc (lambda (line)
                 (unless (string-empty-p line)
-                  (aider--send-line-with-code-syntax line)))
+                  (aider--send-command (string-trim line) t)))
               (split-string region-text "\n" t)))
     (message "No region selected.")))
 
diff --git a/aider.el b/aider.el
index f02e9e0..b3bf23b 100644
--- a/aider.el
+++ b/aider.el
@@ -2,7 +2,7 @@
 
 ;; Author: Kang Tu <tninja@gmail.com>
 ;; Version: 0.4.0
-;; Package-Requires: ((emacs "26.1") (transient "0.3.0") (magit "2.1.0") (helm "3.0"))
+;; Package-Requires: ((emacs "26.1") (transient "0.3.0") (magit "2.1.0") (helm "3.0") (markdown-mode "2.5"))
 ;; Keywords: convenience, tools
 ;; URL: https://github.com/tninja/aider.el
 ;; SPDX-License-Identifier: Apache-2.0
@@ -59,7 +59,7 @@ Also based on aider LLM benchmark: https://aider.chat/docs/leaderboards/"
     (aider--infix-switch-to-buffer-other-frame)
     ("a" "Run Aider (C-u: args) " aider-run-aider)
     ("z" "Switch to Aider Buffer" aider-switch-to-buffer)
-    ("p" "Repo Prompt File" aider-open-prompt-file)
+    ("p" "Input with Repo Prompt File" aider-open-prompt-file)
     ("o" "Select Model (C-u: leadboard)" aider-change-model)
     ("s" "Reset Aider (C-u: clear)" aider-reset)
     ("l" "Other Command (C-u: manual)" aider-other-process-command)
@@ -69,21 +69,23 @@ Also based on aider LLM benchmark: https://aider.chat/docs/leaderboards/"
     ("w" "Add All Files in Window" aider-add-files-in-current-window)
     ("d" "Add Same Type Files in dir" aider-add-same-type-files-under-dir)
     ("O" "Drop Current File" aider-drop-current-file)
-    ("m" "Last Commit (C-u: magit-log)" aider-magit-show-last-commit)
+    ("m" "Show Last Commit (C-u: magit-log)" aider-magit-show-last-commit-or-log)
     ("u" "Undo Last Change" aider-undo-last-change)
+    ("v" "Pull or Review Code Change" aider-pull-or-review-diff-file)
     ]
    ["Code Change"
-    ("t" "Architect Discuss / Change" aider-architect-discussion)
-    ("c" "Direct Code Change" aider-code-change)
-    ("r" "Refactor Function / Region" aider-function-or-region-refactor)
+    ("r" "Change Function / Region" aider-function-or-region-refactor)
     ("i" "Implement Requirement" aider-implement-todo)
+    ("t" "Architect Discuss / Change" aider-architect-discussion)
     ("U" "Write Unit Test" aider-write-unit-test)
     ("T" "Fix Failing Test" aider-fix-failing-test-under-cursor)
+    ("c" "Direct Code Change" aider-code-change)
     ]
    ["Discussion"
-    ("q" "Ask Question (C-u: no context)" aider-ask-question)
+    ("q" "Question on Function / Region" aider-ask-question)
     ("y" "Then Go Ahead" aider-go-ahead)
-    ("e" "Explain Function / Region" aider-function-or-region-explain)
+    ;; ("e" "Explain Function / Region" aider-function-or-region-explain)
+    ("Q" "Question without Context" aider-general-question)
     ("D" "Debug Exception" aider-debug-exception)
     ("h" "Help (C-u: homepage)" aider-help)
     ("x" "Exit Aider" aider-exit)
diff --git a/transient_menu.png b/transient_menu.png
index 2e335e5..5783759 100644
Binary files a/transient_menu.png and b/transient_menu.png differ
